Controller = cppStaticLibrary + {

  folder = "Libs"
  root = "$(srcDirRoot)"

  precompiledHeader = {
    "$(srcDirRoot)/Tools/Precompiled/BHumanPch.h"
  }

  files = {
    "$(srcDirRoot)/Controller/Platform/*.cpp" = bhCppSource
    "$(srcDirRoot)/Controller/Platform/*.h"
    "$(srcDirRoot)/Controller/Platform/$(OS)/*.cpp" = bhCppSource
    "$(srcDirRoot)/Controller/Platform/$(OS)/*.h"
    "$(srcDirRoot)/Controller/Representations/**.cpp" = bhCppSource
    "$(srcDirRoot)/Controller/Representations/**.h"
    "$(srcDirRoot)/Controller/Views/**.cpp" = bhCppSource
    "$(srcDirRoot)/Controller/Views/**.h"
    "$(srcDirRoot)/Controller/Visualization/**.cpp" = bhCppSource
    "$(srcDirRoot)/Controller/Visualization/**.h"
    "$(srcDirRoot)/Controller/*.cpp" = bhCppSource
    "$(srcDirRoot)/Controller/*.h"
    "$(srcDirRoot)/Tools/Precompiled/BHumanPch.h"
    "$(utilDirRoot)/asmjit/src/**.cpp" = cppSource

    if (configuration != "Release") {
      if (platform == "Linux") {
        "$(srcDirRoot)/Modules/MotionControl/WalkingEngine/Walk2014Generator.cpp" = bhCppSource
        "$(srcDirRoot)/Modules/Sensing/FallDownStateDetector/FallDownStateProvider.cpp" = bhCppSource
        "$(srcDirRoot)/Modules/Sensing/InertialDataProvider/InertialDataProvider.cpp" = bhCppSource
        "$(srcDirRoot)/Representations/Sensing/RobotModel.cpp" = bhCppSource
        "$(srcDirRoot)/Tools/ImageProcessing/InImageSizeCalculations.cpp" = bhCppSource
        "$(srcDirRoot)/Tools/Math/**.cpp" = bhCppSource
        "$(srcDirRoot)/Tools/Modeling/UKFPose2D.cpp" = bhCppSource
        "$(srcDirRoot)/Tools/Motion/**.cpp" = bhCppSource
      }
    }
  }
  files += pchFiles

  qtRessourceFiles = "$(srcDirRoot)/Controller/Icons/**.png"
  qtRccFiles = "$(srcDirRoot)/Controller/*.qrc"
  qtMocFiles = {
    "$(srcDirRoot)/Controller/BHToolBar.h"
    "$(srcDirRoot)/Controller/Views/AnnotationView.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/ColorCalibrationView.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/RangeSelector.h"
    "$(srcDirRoot)/Controller/Views/ColorCalibrationView/ThresholdSelector.h"
    "$(srcDirRoot)/Controller/Views/ConsoleView.h"
    "$(srcDirRoot)/Controller/Views/DataView/DataWidget.h"
    "$(srcDirRoot)/Controller/Views/DataView/PropertyEditorFactory.h"
    "$(srcDirRoot)/Controller/Views/DataView/PropertyManager.h"
    "$(srcDirRoot)/Controller/Views/DotView.h"
    "$(srcDirRoot)/Controller/Views/Statistics/StatisticRobotView.h"
    "$(srcDirRoot)/Controller/Views/Statistics/StatisticsPlotView.h"
    "$(srcDirRoot)/Controller/Views/ImageView.h"
    "$(srcDirRoot)/Controller/Views/JointView.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickView.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickViewGLWidget.h"
    "$(srcDirRoot)/Controller/Views/KickView/KickViewWidget.h"
    "$(srcDirRoot)/Controller/Views/KickView/TabWidget.h"
    "$(srcDirRoot)/Controller/Views/LogPlayerControlView.h"
    "$(srcDirRoot)/Controller/Views/PlotView.h"
    "$(srcDirRoot)/Controller/Views/SensorView.h"
    "$(srcDirRoot)/Controller/Views/TimeView.h"
  }
  files += qtFiles

  defines += {
    "QXT_STATIC"
    "TARGET_SIM"
    "ASMJIT_EMBED"
    "ASMJIT_BUILD_X86"
    "ASMJIT_DISABLE_BUILDER"
    "ASMJIT_DISABLE_COMPILER"
    "ASMJIT_DISABLE_LOGGING"
    "ASMJIT_DISABLE_TEXT"
    "ASMJIT_DISABLE_VALIDATION"
    if (host == "Win32") {
      "_CRT_SECURE_NO_DEPRECATE"
    }
    if (configuration != "Debug") {
      "QT_NO_DEBUG"
    }
  }

  includePaths = {
    "$(srcDirRoot)"
    "$(utilDirRoot)/SimRobot/Util/Eigen"
    "$(utilDirRoot)/SimRobot/Src/SimRobot"
    "$(utilDirRoot)/SimRobot/Src/SimRobotCore2"
    "$(utilDirRoot)/SimRobot/Src/SimRobotEditor"
    "$(utilDirRoot)/GameController/include"
    "$(utilDirRoot)/libjpeg/src"
    "$(utilDirRoot)/libqxt"
    "$(utilDirRoot)/qtpropertybrowser"
    "$(utilDirRoot)/snappy/include"
    "$(utilDirRoot)/asmjit/src"
    if (host == "Win32") {
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtCore"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtGui"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtNetwork"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtOpenGL"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtSvg"
      "$(utilDirRoot)/SimRobot/Util/qt/Windows/include/QtWidgets"
      "$(utilDirRoot)/SimRobot/Util/glew/Windows/include"
      "$(utilDirRoot)/Buildchain/Windows/include"
    }
    if (platform == "Linux") {
      "$(qtinclude)"
      "$(qtinclude)/QtCore"
      "$(qtinclude)/QtGui"
      "$(qtinclude)/QtOpenGL"
      "$(qtinclude)/QtSvg"
      "$(qtinclude)/QtWidgets"
    }
  }

  cppFlags += {
    if (tool == "vcxproj") {
      "/Zm200"
      "/wd4503"
      if (avx2 == "true" ) {
        "/arch:AVX2"
      } else {
        "/arch:AVX"
      }
      if (configuration == "Release") {
        "/GS-"
      }
    } else if (platform == "Linux") {
      "-Wno-return-stack-address"
      "-mmmx -msse -msse2"
      if (ssse3 == "true") {
        "-msse3 -mssse3"
      }
      if (avx2 == "true") {
        "-mavx -mavx2"
      }
    }
  }

  visualizers = {
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/Angle.natvis"
    "$(utilDirRoot)/Buildchain/Windows/Visualizers/qt5.natvis"
    "$(utilDirRoot)/SimRobot/Util/Eigen/debug/msvc/eigen.natvis"
  }
}
